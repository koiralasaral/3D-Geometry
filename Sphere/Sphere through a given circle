import sympy as sp
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def sphere_through_circle(circle_center, circle_radius, sphere_center):
    x, y, z = sp.symbols('x y z')
    
    # Equation of the circle in 3D
    circle_eq = (x - circle_center[0])**2 + (y - circle_center[1])**2 + (z - circle_center[2])**2 - circle_radius**2
    
    # Equation of the sphere
    R = sp.symbols('R')
    sphere_eq = (x - sphere_center[0])**2 + (y - sphere_center[1])**2 + (z - sphere_center[2])**2 - R**2
    
    # Solve for the radius of the sphere such that it passes through the circle
    solutions = sp.solve(circle_eq.subs(z, circle_center[2]), x)
    
    return sphere_eq, solutions

def plot_sphere_and_circle(circle_center, circle_radius, sphere_center, sphere_radius):
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    
    # Plot the sphere
    u = np.linspace(0, 2 * np.pi, 100)
    v = np.linspace(0, np.pi, 100)
    x = sphere_center[0] + sphere_radius * np.outer(np.cos(u), np.sin(v))
    y = sphere_center[1] + sphere_radius * np.outer(np.sin(u), np.sin(v))
    z = sphere_center[2] + sphere_radius * np.outer(np.ones(np.size(u)), np.cos(v))
    ax.plot_surface(x, y, z, color='b', alpha=0.3)
    
    # Plot the circle
    theta = np.linspace(0, 2 * np.pi, 100)
    x_circle = circle_center[0] + circle_radius * np.cos(theta)
    y_circle = circle_center[1] + circle_radius * np.sin(theta)
    z_circle = np.full_like(theta, circle_center[2])
    ax.plot(x_circle, y_circle, z_circle, color='r')
    
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    plt.show()

# Example usage
circle_center = (1, 2, 3)
circle_radius = 5
sphere_center = (4, 5, 6)

sphere_eq, solutions = sphere_through_circle(circle_center, circle_radius, sphere_center)
print("Sphere Equation:", sphere_eq)
print("Solutions for x on the circle:", solutions)

# Assuming the radius of the sphere is known or calculated
sphere_radius = 7  # Example radius
plot_sphere_and_circle(circle_center, circle_radius, sphere_center, sphere_radius)